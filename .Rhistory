library(rsnodas)
library(rsnodas)
library(rsnodas)
devtools::document()
devtools::document()
devtools::document()
library(rsnodas)
library(rsnodas)
# for more options see the recording of class
# - https://bookdown.org/yihui/rmarkdown-cookbook/hide-one.html
knitr::opts_chunk$set(echo = FALSE, warning = FALSE,
message = FALSE, results = TRUE)
'%>%' <- magrittr::'%>%'
library(rsnodas)
library(ggplot2)
# Example of downloading 4km monthly precipitation maps from Jan. 2021 - March 2021
download_prism(sp_res = "4km", data = c("ppt"), t_res = "monthly",
start_date = as.Date("2021-01-01"), end_date = as.Date("2021-03-15"),
out_dir = paste0(getwd(), "/prism"))
sp_res = "4km"
data = "ppt"
start_date = as.Date("2017-04-01")
end_date = as.Date("2017-08-03")
# get the pipe function from magrittr
"%>%" <- magrittr::"%>%"
# Get an shape of utah from the maps package
ut_map <- maps::map("state", plot = FALSE, fill = TRUE) %>%
sf::st_as_sf() %>%
dplyr::filter(ID == "utah") %>%
sf::st_transform(crs = sf::st_crs(snodas_2021[[1]]))
snodas_2021 <- download_snodas(dates = format_dates(day = 1,
month = 4,
year = 2021),
masked = TRUE,
overwrite = TRUE,
remove_zip = TRUE,
data_saved = c('swe'),
out_dir = paste0(getwd(), "/snodas_data"),
GTiff = FALSE) #
# get the pipe function from magrittr
"%>%" <- magrittr::"%>%"
# Get an shape of utah from the maps package
ut_map <- maps::map("state", plot = FALSE, fill = TRUE) %>%
sf::st_as_sf() %>%
dplyr::filter(ID == "utah") %>%
sf::st_transform(crs = sf::st_crs(snodas_2021[[1]]))
# Crop the maps to just the state of utah and name the values to be "Value"
snodas_ut_2021 <- sf::st_crop(snodas_2021[[1]], ut_map)
# Crop the maps to just the state of utah and name the values to be "Value"
snodas_ut_2021 <- sf::st_crop(snodas_2021[[1]], ut_map)
names(snodas_ut_2021) <- "Value"
names(snodas_ut_2021) <- "Value"
# Plot SNODAS April 1st 2015 SWE map of Utah with blue outline
ggplot() +
stars::geom_stars(data = snodas_ut_2021) +
geom_sf(data = ut_map, fill = "NA", size = 1, color = "blue") +
ggtitle("2021 SNODAS SWE predictions") +
scale_fill_viridis_c(option = "A") +
theme(plot.title = element_text(hjust = 0.5, size = 18),
text = element_text(size = 14))
# Example of downloading 4km monthly precipitation maps from Jan. 2021 - March 2021
download_prism(sp_res = "4km", data = c("ppt"), t_res = "monthly",
start_date = as.Date("2021-01-01"), end_date = as.Date("2021-03-15"),
out_dir = paste0(getwd(), "/prism"))
sp_res = "4km"
data = c("ppt")
t_res = "monthly"
start_date = as.Date("2021-01-01")
end_date = as.Date("2021-03-15")
out_dir = paste0(getwd(), "/prism")
# Testing to ensure variables are in the correct format
if ((sp_res != "4km") & (sp_res != "800m")) {
stop("spatial resolution argument must be 4km or 800m.")
}
# Double-checking that every element in data is one of the products
data <- tolower(data)
for (i in 1:length(data)) {
if (!(data[i] %in% c("ppt", "tmin", "tmax", "tmean",
"tdmean", "vpdmin","vpdmax"))) {
stop("all data argument(s) must be a valid data option")
}
}
years <- gsub("-", "", substring(tdate, 1, 4))
# If no end_date, then the start date is the end date as well.
if (missing(end_date)) {end_date <- start_date}
time_var <- c("daily", "monthly", "yearly")
time_va <- c("day", "month", "year")
time_arg <- match(t_res, time_var)
# get the first and last year, this will be used in the "for" loop
t <- seq(start_date, end_date, by = time_va[time_arg])
# For loops depend on time resolution
if (t_res == "daily") {
tdate <- seq(start_date, end_date, by = "day")
years <- gsub("-", "", substring(tdate, 1, 4))
tdate <- gsub("-", "", tdate)
time_resolution <- "day"
} else if(t_res == "monthly") {
tdate <- seq(start_date, end_date, by = "month")
years <- gsub("-", "", substring(tdate, 1, 4))
# remove the day argument and get rid of the "-" and return a 6 character
tdate <- gsub("-", "", substring(tdate, 1, 7))
time_resolution <- "month"
} else if(t_res == "yearly") {
tdate <- seq(start_date, end_date, by = "year")
years <- gsub("-", "", substring(tdate, 1, 4))
tdate <- unique(gsub("-", "", substring(tdate, 1, 4)))
time_resolution <- "year"
}
tsource <- c()
destination <- c()
tagname <- c()
final_location <- c()
l = 1
for (var in data) {
for (j in 1:length(years)) {
# Creates the vector tdate with all the dates of interest
tsource[l] <- paste("http://services.nacse.org/prism/data/public",
sp_res, var, tdate[j], sep = "/")
destination[l] <- out_dir
tagname[l] <- paste("PRISM", var, sp_res, tdate[j], sep = "_")
final_location[l] <- paste0(destination[l], "/", tagname[l], ".zip")
l = l + 1
}
}
devtools::document()
devtools::document()
library(rsnodas)
# for more options see the recording of class
# - https://bookdown.org/yihui/rmarkdown-cookbook/hide-one.html
knitr::opts_chunk$set(echo = FALSE, warning = FALSE,
message = FALSE, results = TRUE)
'%>%' <- magrittr::'%>%'
library(rsnodas)
library(ggplot2)
# Example of downloading 4km monthly precipitation maps from Jan. 2021 - March 2021
download_prism(sp_res = "4km", data = c("ppt"), t_res = "monthly",
start_date = as.Date("2021-01-01"), end_date = as.Date("2021-03-15"),
out_dir = paste0(getwd(), "/prism"))
# april 1st data for SNOTEL stations in Utah and subset to just April 1st, 2014.
snotel_ut <- rsnodas::april_1_snotel_data
snotel_ut_2021 <- snotel_ut[snotel_ut$DATE == "2021-04-01", ]
# creation of a data frame with all the PRISM variables of precipitation
gam_2021 <- gam_to_df(model_data = snotel_ut_2021,
raster_template = snodas_ut_2021,
path_to_prism = paste0(getwd(), "/prism"),
model_x <- c("ppt_2021_03"),
model_y <- c("VALUE"),
coords = c("LONGITUDE", "LATITUDE"))
head(gam_2021, 5)
# This allows users to explore using different models with the monthly precipitation 2021.
model <- mgcv::gam(data = snotel_ut_2021,
VALUE ~ s(LONGITUDE, LATITUDE, bs = "sos", k = 25) +
s(ppt_2021_03),
method = "REML")
# After creating a model, we can make predictions of SWE with the information available.
gam_rast <- df_to_raster(model = model,
data_frame = gam_2021,
raster_template = snodas_ut_2021)
ggplot() +
stars::geom_stars(data = gam_rast) +
geom_sf(data = ut_map, fill = "NA", size = 1, color = "blue") +
ggtitle("2021 GAM SWE predictions") +
scale_fill_viridis_c(option = "A") +
theme(plot.title = element_text(hjust = 0.5, size = 16),
text = element_text(size = 12))
dens_2021 <- points_to_density_stars(sp_points = snotel_ut_2021,
coords = c("LONGITUDE", "LATITUDE"),
raster_template = snodas_ut_2021,
sigma = 15000,
max_weight = 1,
flat_crs = "+proj=utm + zone=12 + datum=WGS84")
names(dens_2021) <- "Weights"
ggplot() +
stars::geom_stars(data = dens_2021) +
geom_sf(data = ut_map, fill = "NA", size = 1, color = "blue") +
ggtitle("2021 Station Density") +
scale_fill_viridis_c(option = "B") +
theme(plot.title = element_text(hjust = 0.5, size = 18),
text = element_text(size = 12))
comb_map <- blend_raster(raster_sate = snodas_ut_2021,
raster_land = gam_rast,
weights = dens_2021)
names(comb_map) <- "Value"
ggplot() +
stars::geom_stars(data = comb_map) +
geom_sf(data = ut_map, fill = "NA", size = 1, color = "blue") +
ggtitle("2021 Ensemble Map") +
scale_fill_viridis_c(option = "B") +
theme(plot.title = element_text(hjust = 0.5, size = 18),
text = element_text(size = 12))
devtools::document()
devtools::document()
library(rsnodas)
